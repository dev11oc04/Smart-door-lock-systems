#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>
#include <Keypad.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

#define Password_Length 5

#define servoPin 13 // Define pin number to which servo motor is connected
#define durationTime 3000 // Define the time it remains in the open position of the door lock (milliseconds)
#define servoMin 0 // Open position
#define servoMax 90 // Closed position

SoftwareSerial mySerial(9, 12);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
Servo servo1; // Define servo name / object
LiquidCrystal_I2C lcd(0x27, 16, 2); // Change the address to match your I2C address

char Data[Password_Length];
char Master[Password_Length] = "5555";
byte data_count = 0;
bool door = false;

const int buzzer = 8;

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {7, 6, 5, 4};
byte colPins[COLS] = {3, 2, 1, 0};
Keypad customKeypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

void setup() {
  pinMode(buzzer, OUTPUT);
  servo1.attach(servoPin); // Define pin number of the servo
  servo1.write(servoMax); // The position of the servo at the start of the program

  lcd.init(); // Initialize the I2C LCD
  lcd.backlight(); // Turn on the backlight

  lcd.print("Protected Door");
  loading("Loading");
  lcd.clear();

  Serial.begin(9600);
  Serial.println("Adafruit finger detect test");
  // set the data rate for the sensor serial port
  finger.begin(57600);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1);
  }
  Serial.println("Waiting for valid finger...");
}

void loop() {
  if (door == true) {
    char customKey = customKeypad.getKey();
    if (customKey == '#') {
      lcd.clear();
      ServoClose();
      lcd.print("Door is closed");
      delay(3000);
      door = false;
    }
  } else {
    char fingerprintID = getFingerprintIDez();
    if (fingerprintID != -1) {
      lcd.clear();
      ServoOpen();
      lcd.print("Door is Open");
      door = true;
      delay(5000);
      loading("Waiting");
      lcd.clear();
      lcd.print("Time is up!");
      lcd.print("Door is closed");
      delay(1000);
      ServoClose();
      door = false;
    } else {
      Open();
    }
  }
}

void loading(char msg[]) {
  lcd.setCursor(0, 1);
  lcd.print(msg);

  for (int i = 0; i < 9; i++) {
    delay(1000);
    lcd.print(".");
  }
}

void clearData() {
  while (data_count != 0) {
    Data[data_count--] = 0;
  }
  return;
}

void ServoClose() {
  servo1.write(servoMax); // Closed position
}

void ServoOpen() {
  servo1.write(servoMin); // Open position
}

void Open() {
  lcd.setCursor(0, 0);
  lcd.print("Enter Password or Scan Fingerprint:");

  char customKey = customKeypad.getKey();
  if (customKey) {
    Data[data_count] = customKey;
    lcd.setCursor(data_count, 1);
    lcd.print(Data[data_count]);
    data_count++;
  }

  if (data_count == Password_Length - 1) {
    if (!strcmp(Data, Master)) {
      lcd.clear();
      ServoOpen();
      lcd.print(" Door is Open ");
      door = true;
      delay(5000);
      loading("Waiting");
      lcd.clear();
      lcd.print(" Time is up! ");
      lcd.print("Door is closed");
      delay(1000);
      ServoClose();
      door = false;
    } else {
      lcd.clear();
      lcd.print(" Wrong Password ");
      lcd.print("Access Denied");
      activateBuzzer(); // Access Denied, activate buzzer
      door = false;
    }
    delay(1000);
    lcd.clear();
    clearData();
  }
}

void activateBuzzer() {
  tone(buzzer, 1000); // Activate the buzzer
  delay(1000);        // Buzz for 1 second
  noTone(buzzer);     // Stop the buzzer
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  // OK success!
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }
  // found a match!
  Serial.print("Door is Open");
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
}

int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return -1;
  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return -1;
  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) {
    activateBuzzer(); // Access Denied, activate buzzer
    return -1;
  }
  ServoOpen(); // If the fingerprint is correct open the door lock
  delay(durationTime); // Keep the lock open for the defined duration
  ServoClose(); // take the lock OFF again
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
  return finger.fingerID;
}
