#include <WiFi.h>
#include <ESP32Servo.h>

Servo myservo;  // Create servo object to control a servo

// GPIO the servo is attached to
static const int servoPin = 13;

// Replace with your network credentials
const char* ssid = "Laptop";
const char* password = "#dev11oc04";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Decode HTTP GET value
int servoPosition = 0;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  Serial.begin(115200); // Set baud rate to 115200 for the serial monitor

  myservo.attach(servoPin); // Attaches the servo on the servoPin to the servo object

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  // Improved connection feedback
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    // Optional: You can add a timeout for connection attempts
    if (millis() - startTime > 10000) { // 10 seconds timeout
      Serial.println("\nFailed to connect to WiFi, restarting...");
      ESP.restart(); // Restart the ESP32
    }
  }

  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
  WiFiClient client = server.available(); // Listen for incoming clients

  if (client) { // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client."); // Print a message out in the serial port
    String currentLine = ""; // Make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) { // Loop while the client's connected
      currentTime = millis();
      if (client.available()) { // If there's bytes to read from the client,
        char c = client.read(); // Read a byte, then
        Serial.write(c); // Print it out the serial monitor
        header += c;
        if (c == '\n') { // If the byte is a newline character
          // If the current line is blank, you got two newline characters in a row.
          // That's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // Parse GET request before sending the response
            bool servoActionTaken = false;
            String action;
            if (header.indexOf("GET /open") >= 0) {
              servoPosition = 0; // Change to the closed position
              myservo.write(servoPosition);
              Serial.println("Door Opened");
              servoActionTaken = true;
              action = "open";
            } 
            if (header.indexOf("GET /close") >= 0) {
              servoPosition = 90; // Change to the open position
              myservo.write(servoPosition);
              Serial.println("Door Closed");
              servoActionTaken = true;
              action = "close";
            }
            
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            client.println("<style>body { text-align: center; font-family: 'Trebuchet MS', Arial; background-color: #f7f7f7; color: #333; margin-left: auto; margin-right: auto; padding: 0 10px; }");
            client.println(".button { display: inline-block; padding: 15px 25px; font-size: 24px; cursor: pointer; text-align: center; text-decoration: none; outline: none; color: #fff; background-color: #4CAF50; border: none; border-radius: 15px; box-shadow: 0 9px #999; margin: 10px; }");
            client.println(".button:hover { background-color: #3e8e41 }");
            client.println(".button:active { background-color: #3e8e41; box-shadow: 0 5px #666; transform: translateY(4px); }");
            client.println(".button-red { background-color: #f44336; }");
            client.println(".button-red:hover { background-color: #da190b; }");
            client.println(".button-red:active { background-color: #da190b; box-shadow: 0 5px #666; transform: translateY(4px); }");
            client.println(".container { background-color: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); display: inline-block; margin-top: 50px; }");
            client.println("h1 { color: #5D6D7E; }");
            client.println("</style>");
            client.println("</head>");
            client.println("<body>");
            client.println("<div class=\"container\">");
            client.println("<h1>OmniLock</h1>");
            client.println("<button class=\"button\" onclick=\"sendData('open')\">Open</button>");
            client.println("<button class=\"button button-red\" onclick=\"sendData('close')\">Close</button>");
            client.println("</div>");
            client.println("<script>");
            client.println("function sendData(action) {");
            client.println("  var xhttp = new XMLHttpRequest();");
            client.println("  xhttp.open('GET', '/' + action, true);");
            client.println("  xhttp.send();");
            client.println("  if (action == 'open') { alert('Door is Opened'); }");
            client.println("  if (action == 'close') { alert('Door is Closed'); }");
            client.println("}");
            client.println("</script>");
            client.println("</body>");
            client.println("</html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // If you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // If you got anything else but a carriage return character,
          currentLine += c;      // Add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
}
}